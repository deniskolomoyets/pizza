{"ast":null,"code":"var _jsxFileName = \"/Users/deniskolomoyets/Documents/Projects/pizza/src/pages/Home.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport qs from 'qs';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { selectFilter, setCategoryId, setCurrentPage, setFilters } from '../redux/slices/filterSlice';\nimport Categories from '../components/Categories';\nimport Sort, { list } from '../components/Sort';\nimport PizzaBlock from '../components/PizzaBlock';\nimport Skeleton from '../components/PizzaBlock/Skeleton';\nimport Pagination from '../Pagination';\nimport { fetchPizzas, selectPizzaData } from '../redux/slices/pizzaSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const isMounted = React.useRef(false);\n  const {\n    items,\n    status\n  } = useSelector(selectPizzaData);\n\n  // const categoryId = useSelector((state) => state.filter.categoryId);\n  // const sortType = useSelector((state) => state.filter.sort.sortProperty);\n  // const currentPage = useSelector((state) => state.filter.currentPage);\n  // const searchValue = useSelector((state) => state.filter.searcValue);\n\n  const {\n    categoryId,\n    sort,\n    currentPage,\n    searchValue\n  } = useSelector(selectFilter);\n  const onChangeCategory = id => {\n    dispatch(setCategoryId(id));\n  };\n  const onChangePage = number => {\n    dispatch(setCurrentPage(number));\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const getPizzas = async () => {\n    const sortBy = sort.sortProperty.replace('-', '');\n    const order = sort.sortProperty.includes('-') ? 'asc' : 'decs';\n    const category = categoryId > 0 ? `category=${categoryId}` : '';\n    const search = searchValue ? `&search=${searchValue}` : '';\n\n    // await axios\n    //   .get(\n    //     `https://-64aaeb3e0c6d844abedefbc9.mockapi.io/items?page=${currentPage}&limit=4&${category}&sortBy=${sortBy}&order=${order}${search}`,\n    //   )\n    //   .then((res) => {\n    //     setItems(res.data); //answer from backend is stored in date\n    //     setIsLoading(false);\n    //   }).catch((err) => {\n    //     setIsLoading(false);\n    //   })\n\n    dispatch(fetchPizzas({\n      sortBy,\n      order,\n      category,\n      search,\n      currentPage\n    }));\n    window.scrollTo(0, 0);\n  };\n\n  // if changed parameters and was first render\n  //если первого рендера не было, не надо вшивать в адресную строчку параметры (больше как лайфхак)\n  React.useEffect(() => {\n    if (isMounted.current) {\n      //если был 1 рендер  если это будет true то делай нижнюю информацию\n      const queryString = qs.stringify({\n        // если пришли параметры превращаю их в одну строчку\n        sortProperty: sort.sortProperty,\n        categoryId,\n        currentPage\n      });\n      navigate(`?${queryString}`);\n    }\n    isMounted.current = true;\n  }, [categoryId, sort.sortProperty, currentPage, searchValue]);\n\n  //if was first render, check url-parameters and save in redux\n  React.useEffect(() => {\n    if (window.location.search) {\n      //если window.location.search есть то буду парсить из парпаметров и превращать в объект\n      const params = qs.parse(window.location.search.substring(1)); //парсим и убираем вопросительный знак\n\n      const sort = list.find(obj => obj.sortProperty === params.sortProperty); // необходимо пробежаться по каждому сво-тву и найти в объекте sortProperty то что есть в params.sortProperty\n\n      dispatch(setFilters({\n        ...params,\n        //sortProperty(ссылка) передаеться как строчка, поэтому в const sort мы пробегаемся по листу и сравниваем, передавая при этом обьект\n        sort\n      }));\n    }\n  }, []);\n\n  //if was first render, request pizzas\n  React.useEffect(() => {\n    getPizzas();\n  }, [categoryId, sort.sortProperty, currentPage, searchValue]);\n  const skeletons = [...new Array(6)].map((_, index) => /*#__PURE__*/_jsxDEV(Skeleton, {}, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 57\n  }, this));\n  const pizzas = items.map(obj => /*#__PURE__*/_jsxDEV(Link, {\n    to: `/pizza/${obj.id}`,\n    children: /*#__PURE__*/_jsxDEV(PizzaBlock, {\n      ...obj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, obj.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content__top\",\n      children: [/*#__PURE__*/_jsxDEV(Categories, {\n        value: categoryId,\n        onChangeCategory: onChangeCategory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sort, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"content__title\",\n      children: \"\\u0412\\u0441\\u0435 \\u043F\\u0438\\u0446\\u0446\\u044B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), status === 'error' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content__error-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Error \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\uD83D\\uDE15\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Failed to get pizzas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content__items\",\n      children: status === 'loading' ? skeletons : pizzas\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      onChangePage: onChangePage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"ZsXYCbjzVp0ay6TedEIZf3a6c2g=\", false, function () {\n  return [useNavigate, useDispatch, useSelector, useSelector];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useSelector","useDispatch","qs","Link","useNavigate","selectFilter","setCategoryId","setCurrentPage","setFilters","Categories","Sort","list","PizzaBlock","Skeleton","Pagination","fetchPizzas","selectPizzaData","jsxDEV","_jsxDEV","Home","_s","navigate","dispatch","isMounted","useRef","items","status","categoryId","sort","currentPage","searchValue","onChangeCategory","id","onChangePage","number","getPizzas","sortBy","sortProperty","replace","order","includes","category","search","window","scrollTo","useEffect","current","queryString","stringify","location","params","parse","substring","find","obj","skeletons","Array","map","_","index","fileName","_jsxFileName","lineNumber","columnNumber","pizzas","to","children","className","value","_c","$RefreshReg$"],"sources":["/Users/deniskolomoyets/Documents/Projects/pizza/src/pages/Home.jsx"],"sourcesContent":["import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport qs from 'qs';\nimport {Link, useNavigate } from 'react-router-dom';\n\nimport {\n  selectFilter,\n  setCategoryId,\n  setCurrentPage,\n  setFilters,\n} from '../redux/slices/filterSlice';\nimport Categories from '../components/Categories';\nimport Sort, { list } from '../components/Sort';\nimport PizzaBlock from '../components/PizzaBlock';\nimport Skeleton from '../components/PizzaBlock/Skeleton';\nimport Pagination from '../Pagination';\nimport { fetchPizzas, selectPizzaData } from '../redux/slices/pizzaSlice';\n\nconst Home = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const isMounted = React.useRef(false);\n\n  const { items, status } = useSelector(selectPizzaData);\n\n  // const categoryId = useSelector((state) => state.filter.categoryId);\n  // const sortType = useSelector((state) => state.filter.sort.sortProperty);\n  // const currentPage = useSelector((state) => state.filter.currentPage);\n  // const searchValue = useSelector((state) => state.filter.searcValue);\n\n  const { categoryId, sort, currentPage, searchValue } = useSelector(selectFilter);\n\n  const onChangeCategory = (id) => {\n    dispatch(setCategoryId(id));\n  };\n\n  const onChangePage = (number) => {\n    dispatch(setCurrentPage(number));\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const getPizzas = async () => {\n    const sortBy = sort.sortProperty.replace('-', '');\n    const order = sort.sortProperty.includes('-') ? 'asc' : 'decs';\n    const category = categoryId > 0 ? `category=${categoryId}` : '';\n    const search = searchValue ? `&search=${searchValue}` : '';\n\n    // await axios\n    //   .get(\n    //     `https://-64aaeb3e0c6d844abedefbc9.mockapi.io/items?page=${currentPage}&limit=4&${category}&sortBy=${sortBy}&order=${order}${search}`,\n    //   )\n    //   .then((res) => {\n    //     setItems(res.data); //answer from backend is stored in date\n    //     setIsLoading(false);\n    //   }).catch((err) => {\n    //     setIsLoading(false);\n    //   })\n\n    dispatch(\n      fetchPizzas({\n        sortBy,\n        order,\n        category,\n        search,\n        currentPage,\n      }),\n    );\n    window.scrollTo(0, 0);\n  };\n\n  // if changed parameters and was first render\n  //если первого рендера не было, не надо вшивать в адресную строчку параметры (больше как лайфхак)\n  React.useEffect(() => {\n    if (isMounted.current) {\n      //если был 1 рендер  если это будет true то делай нижнюю информацию\n      const queryString = qs.stringify({\n        // если пришли параметры превращаю их в одну строчку\n        sortProperty: sort.sortProperty,\n        categoryId,\n        currentPage,\n      });\n      navigate(`?${queryString}`);\n    }\n    isMounted.current = true;\n  }, [categoryId, sort.sortProperty, currentPage, searchValue]);\n\n  //if was first render, check url-parameters and save in redux\n  React.useEffect(() => {\n    if (window.location.search) {\n      //если window.location.search есть то буду парсить из парпаметров и превращать в объект\n      const params = qs.parse(window.location.search.substring(1)); //парсим и убираем вопросительный знак\n\n      const sort = list.find((obj) => obj.sortProperty === params.sortProperty); // необходимо пробежаться по каждому сво-тву и найти в объекте sortProperty то что есть в params.sortProperty\n\n      dispatch(\n        setFilters({\n          ...params, //sortProperty(ссылка) передаеться как строчка, поэтому в const sort мы пробегаемся по листу и сравниваем, передавая при этом обьект\n          sort,\n        }),\n      );\n    }\n  }, []);\n\n  //if was first render, request pizzas\n  React.useEffect(() => {\n    getPizzas();\n  }, [categoryId, sort.sortProperty, currentPage, searchValue]);\n\n  const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index} />);\n\n  const pizzas = items.map((obj) => (\n    <Link key={obj.id} to={`/pizza/${obj.id}`}>\n      <PizzaBlock {...obj} />\n    </Link>\n  ));\n\n  return (\n    <div className=\"container\">\n      <div className=\"content__top\">\n        <Categories value={categoryId} onChangeCategory={onChangeCategory} />\n        <Sort />\n      </div>\n      <h2 className=\"content__title\">Все пиццы</h2>\n      {status === 'error' ? (\n        <div className=\"content__error-info\">\n          <h2>\n            Error <span>😕</span>\n          </h2>\n          <p>Failed to get pizzas</p>{' '}\n        </div>\n      ) : (\n        <div className=\"content__items\">{status === 'loading' ? skeletons : pizzas}</div>\n      )}\n\n      <Pagination currentPage={currentPage} onChangePage={onChangePage} />\n    </div>\n  );\n};\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}