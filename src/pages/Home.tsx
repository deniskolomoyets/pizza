import React from "react";

import {
  Skeleton,
  Categories,
  PizzaBlock,
  Sort,
  Pagination,
} from "../components";
import { useAppDispatch } from "../redux/store";
import { selectFilter } from "../redux/filter/selectors";
import { selectPizzaData } from "../redux/pizza/selectors";
import { setCategoryId, setCurrentPage } from "../redux/filter/filterSlice";
import { fetchPizzas } from "../redux/pizza/asyncActions";
import { useSelector } from "react-redux";

const Home: React.FC = () => {
  const dispatch = useAppDispatch();
  const { categoryId, sort, currentPage, searchValue } =
    useSelector(selectFilter); // –≤—ã—Ç–∞—Å–∫–∏–≤–∞—é —Å–≤–æ–π —Å—Ç–µ–π—Ç —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —Ö—É–∫–∞ –æ–ø–∏—Å—ã–≤–∞—é –≤—Å—ë —á—Ç–æ –Ω—É–∂–Ω–æ —á–µ—Ä–µ–∑ . –º–Ω–µ –≤—ã—Ç–∏—â–∏—Ç—å
  const { items, status } = useSelector(selectPizzaData); //—Ñ—É–Ω-–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ pizzaSlice –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –º–µ–Ω—è–µ—Ç—Å—è –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

  const onChangeCategory = React.useCallback(
    (idx: number) => {
      dispatch(setCategoryId(idx));
    },
    [dispatch]
  ); //create on the first render as useEffect and don't re-create anymore keep it in memory and when I say give onChangeCategory give me the power for the very first render

  const onChangePage = (page: number) => {
    dispatch(setCurrentPage(page));
  };

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const getPizzas = async () => {
    const sortBy = sort.sortProperty.replace("-", ""); //replace("-") –∏–∑ —Å–≤-—Å—Ç–≤–∞ —É–¥–∞–ª–∏ - –µ—Å–ª–∏ –±—É–¥–µ—Ç
    const order = sort.sortProperty.includes("-") ? "asc" : "desc"; // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å - —Ç–æ –¥–µ–ª–∞–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∏–Ω–∞—á–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    const category = categoryId > 0 ? `category=${categoryId}` : "";
    const search = searchValue ? `&search=${searchValue}` : "";

    dispatch(
      fetchPizzas({
        sortBy,
        order,
        category,
        search,
        currentPage: String(currentPage),
      })
    );
    window.scrollTo(0, 0);
  };

  //if was first render, request pizzas
  React.useEffect(() => {
    //–µ—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ –¥–µ–ª–∞—é  fetchPizzas() –∑–∞–ø—Ä–æ—Å
    getPizzas();
  }, [categoryId, sort.sortProperty, currentPage, searchValue]); //–º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–ª–µ–¥–∏—Ç –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–¥–∏ –≤ –±—ç–∫–µ–Ω–¥ –∏ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∏—Ü—Ü

  const skeletons = [...new Array(6)].map((_, index) => (
    <Skeleton key={index} />
  ));

  const pizzas = items.map((obj: any) => <PizzaBlock key={obj.id} {...obj} />);

  return (
    <div className="container">
      <div className="content__top">
        <Categories value={categoryId} onChangeCategory={onChangeCategory} />
        <Sort value={sort} />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      {status === "error" ? (
        <div className="content__error-info">
          <h2>
            Error <span>üòï</span>
          </h2>
          <p>Failed to get pizzas</p>{" "}
        </div>
      ) : (
        <div className="content__items">
          {status === "loading" ? skeletons : pizzas}
        </div>
      )}

      <Pagination currentPage={currentPage} onChangePage={onChangePage} />
    </div>
  );
};
export default Home;
